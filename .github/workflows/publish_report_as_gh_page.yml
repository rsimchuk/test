name: Publist Report As GH Page

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

#      - name: Create GitHub App Token
#        id: app-token
#        uses: actions/create-github-app-token@v1
#        with:
#          app-id: ${{ secrets.APP_ID }}
#          private-key: ${{ secrets.APP_KEY }}
#
#      - name: Get GitHub App User ID
#        id: get-user-id
#        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
#        env:
#          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
#
#      - name: Git config
#        env:
#          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
#        run: |
#          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
#          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
#      - name: Git push
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
##          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
#        run: |
#          git config --global user.name 'Bot'
#          git config --global user.email 'bot@users.noreply.github.com'
#          echo "\nTest" >> README.md
#          git add .
#          git commit -m "Update Readme file"
#          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main --force
##          git push https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}.git HEAD:main --force
##          git push origin main --force


      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create new branch
        run: |
          NEW_BRANCH_NAME="branch-$(date +'%Y%m%d%H%M%S')" # Create a unique branch name
          git checkout -b $NEW_BRANCH_NAME
          echo "\nTest" >> README.md
          git add .
          git commit -m "Update Readme file"
          git push origin $NEW_BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Automated changes"
          branch: $NEW_BRANCH_NAME
          title: "Automated PR from GitHub Actions"
          body: "This PR is automatically generated by a GitHub Action."
          reviewers: |
            rsimchuk
            rsimchuk-helper-bot

  approve-and-merge:
    needs: create-pull-request
    runs-on: ubuntu-latest
    if: success()  # Only runs if the previous job succeeds
    steps:
      # Optional: Automatically approve the PR using a bot account (if allowed)
      - name: Approve Pull Request
        if: github.event.pull_request.merged != 'true'  # Only if it's not merged yet
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # Optional: Merge the PR if reviews are completed and passed
      - name: Merge Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequest = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: context.repo.owner + ':' + process.env.NEW_BRANCH_NAME
            });
            if (pullRequest.data.length > 0) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequest.data[0].number,
                merge_method: 'squash'
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

#      # Optional: Automatically merge PR if approvals aren't required
#      - name: Merge Pull Request
#        if: success() # You can define additional conditions if needed
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const pullRequest = await github.pulls.list({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              state: 'open',
#              head: context.repo.owner + ':' + process.env.NEW_BRANCH_NAME
#            });
#            if (pullRequest.data.length > 0) {
#              await github.pulls.merge({
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                pull_number: pullRequest.data[0].number,
#                merge_method: 'squash'
#              });
#            }
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}